# version: "3.9"

services:
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    command: |
      sh -c '
      echo "Waiting for database to be ready...";
      while ! pg_isready -h db -p 5432 -U postgres; do
        echo "Waiting for database...";
        sleep 2;
      done;
      echo "Database is ready!";
      if [ "$DJANGO_ENV" = "development" ];
      then python manage.py makemigrations --noinput && python manage.py migrate --noinput;
      else python manage.py migrate --noinput;
      fi
      '
    depends_on:
      - db
    env_file:
      - ./.env
    volumes:
      - .:/app

  db:
    image: postgis/postgis:15-3.3
    container_name: postgres_postgis
    environment:
      POSTGRES_DB: aoi_monitoring
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d aoi_monitoring"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  redis:
    image: redis:7-alpine
    container_name: redis_server
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: asset_watch_backend
    entrypoint: ["/usr/local/bin/scripts/docker-entrypoint-backend.sh"]
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    command: gunicorn asset_watch.wsgi:application --bind 0.0.0.0:8000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery_worker
    entrypoint: ["/usr/local/bin/scripts/docker-entrypoint-celery.sh"]
    command: celery -A asset_watch worker --loglevel=info --concurrency=2
    volumes:
      - .:/app
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery_beat
    entrypoint: ["/usr/local/bin/scripts/docker-entrypoint-celery.sh"]
    command: celery -A asset_watch beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
